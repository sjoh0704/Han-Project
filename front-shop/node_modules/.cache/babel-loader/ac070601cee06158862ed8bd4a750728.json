{"ast":null,"code":"export default class ProductService {\n  //   constructor(socket) {\n  //     this.socket = socket;\n  // }  \n  constructor(http, socket) {\n    this.http = http;\n    this.socket = socket;\n  }\n\n  async getProducts(product_id) {\n    let query = product_id ? `${product_id}` : \"\";\n    return this.http.fetch(`/store/${query}`, {\n      method: \"GET\"\n    });\n  }\n\n  async postProduct(product) {\n    const {\n      name,\n      price,\n      description,\n      seller_id,\n      fileurl\n    } = product;\n    return this.http.fetch(`/store`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        price,\n        description,\n        fileurl,\n        seller_id\n      })\n    });\n  }\n\n  async postBuyer(product) {\n    const {\n      buyer_id,\n      seller_id,\n      price,\n      id\n    } = product;\n    return this.http.fetch(`/buyer`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        buyer_id,\n        seller_id,\n        price,\n        id\n      })\n    });\n  }\n\n  async updateProduct(product) {\n    const {\n      name,\n      price,\n      description,\n      seller_id,\n      fileurl,\n      id,\n      finish\n    } = product;\n    return this.http.fetch(`/store/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        name,\n        price,\n        fileurl,\n        description,\n        seller_id,\n        finish\n      })\n    });\n  }\n\n  async removeProduct(productId) {\n    return this.http.fetch(`/store/${productId}`, {\n      method: \"DELETE\"\n    });\n  }\n\n  async plusProduct(productId, buyer_id) {\n    return this.http.fetch(`/store/plus/${productId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        buyer_id: 5\n      })\n    });\n  }\n\n  onSync(callback) {\n    return this.socket.onSync(\"products\", callback);\n  }\n\n}","map":{"version":3,"sources":["/home/seung/react/shop/front-shop/src/components/service/product.js"],"names":["ProductService","constructor","http","socket","getProducts","product_id","query","fetch","method","postProduct","product","name","price","description","seller_id","fileurl","body","JSON","stringify","postBuyer","buyer_id","id","updateProduct","finish","removeProduct","productId","plusProduct","onSync","callback"],"mappings":"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","sourcesContent":["export default class ProductService {\n//   constructor(socket) {\n//     this.socket = socket;\n// }  \n  constructor(http, socket) {\n        this.http = http;\n        this.socket = socket;\n    }\n    async getProducts(product_id) {\n        let query = product_id ? `${product_id}` : \"\";\n        return this.http.fetch(`/store/${query}`, {\n            method: \"GET\",\n        });\n    }\n    async postProduct(product) {\n        const { name, price, description, seller_id, fileurl } = product;\n        return this.http.fetch(`/store`, {\n            method: \"POST\",\n            body: JSON.stringify({ name, price, description, fileurl, seller_id }),\n        });\n    }\n\n    async postBuyer(product) {\n        const { buyer_id, seller_id, price, id } = product;\n        return this.http.fetch(`/buyer`, {\n            method: \"POST\",\n            body: JSON.stringify({ buyer_id, seller_id, price, id }),\n        });\n    }\n\n    async updateProduct(product) {\n        const { name, price, description, seller_id, fileurl, id, finish } = product;\n        return this.http.fetch(`/store/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify({ name, price, fileurl, description, seller_id, finish }),\n        });\n    }\n\n    async removeProduct(productId) {\n        return this.http.fetch(`/store/${productId}`, {\n            method: \"DELETE\",\n        });\n    }\n\n    async plusProduct(productId, buyer_id) {\n        return this.http.fetch(`/store/plus/${productId}`, {\n            method: \"PUT\",\n            body: JSON.stringify({ buyer_id: 5 }),\n        });\n    }\n    onSync(callback) {\n        return this.socket.onSync(\"products\", callback);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}