{"ast":null,"code":"const Crypto = require(\"crypto-js\");\n\nexport default class Signature {\n  static getSignature(config, date, policyBase64) {\n    const getSignatureKey = (key, dateStamp, regionName) => {\n      const kDate = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\n      const kRegion = Crypto.HmacSHA256(regionName, kDate);\n      const kService = Crypto.HmacSHA256(\"s3\", kRegion);\n      const kSigning = Crypto.HmacSHA256(\"aws4_request\", kService);\n      return kSigning;\n    };\n\n    const signature = policyEncoded => {\n      return Crypto.HmacSHA256(policyEncoded, getSignatureKey(config.secretAccessKey, date, config.region)).toString(Crypto.enc.Hex);\n    };\n\n    return signature(policyBase64);\n  }\n\n}","map":{"version":3,"sources":["/home/seung/react/shop/front-shop/node_modules/react-s3/lib/Signature.js"],"names":["Crypto","require","Signature","getSignature","config","date","policyBase64","getSignatureKey","key","dateStamp","regionName","kDate","HmacSHA256","kRegion","kService","kSigning","signature","policyEncoded","secretAccessKey","region","toString","enc","Hex"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,eAAe,MAAMC,SAAN,CAAgB;AACR,SAAZC,YAAY,CAACC,MAAD,EAASC,IAAT,EAAeC,YAAf,EAA6B;AAC5C,UAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,KAAgC;AACpD,YAAMC,KAAK,GAAGX,MAAM,CAACY,UAAP,CAAkBH,SAAlB,EAA6B,SAASD,GAAtC,CAAd;AACA,YAAMK,OAAO,GAAGb,MAAM,CAACY,UAAP,CAAkBF,UAAlB,EAA8BC,KAA9B,CAAhB;AACA,YAAMG,QAAQ,GAAGd,MAAM,CAACY,UAAP,CAAkB,IAAlB,EAAwBC,OAAxB,CAAjB;AACA,YAAME,QAAQ,GAAGf,MAAM,CAACY,UAAP,CAAkB,cAAlB,EAAkCE,QAAlC,CAAjB;AACA,aAAOC,QAAP;AACH,KAND;;AAOA,UAAMC,SAAS,GAAGC,aAAa,IAAI;AAC/B,aAAOjB,MAAM,CAACY,UAAP,CAAkBK,aAAlB,EAAiCV,eAAe,CAACH,MAAM,CAACc,eAAR,EAAyBb,IAAzB,EAA+BD,MAAM,CAACe,MAAtC,CAAhD,EAA+FC,QAA/F,CAAwGpB,MAAM,CAACqB,GAAP,CAAWC,GAAnH,CAAP;AACH,KAFD;;AAGA,WAAON,SAAS,CAACV,YAAD,CAAhB;AACH;;AAb0B","sourcesContent":["const Crypto = require(\"crypto-js\");\n\nexport default class Signature {\n    static getSignature(config, date, policyBase64) {\n        const getSignatureKey = (key, dateStamp, regionName) => {\n            const kDate = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\n            const kRegion = Crypto.HmacSHA256(regionName, kDate);\n            const kService = Crypto.HmacSHA256(\"s3\", kRegion);\n            const kSigning = Crypto.HmacSHA256(\"aws4_request\", kService);\n            return kSigning;\n        };\n        const signature = policyEncoded => {\n            return Crypto.HmacSHA256(policyEncoded, getSignatureKey(config.secretAccessKey, date, config.region)).toString(Crypto.enc.Hex);\n        };\n        return signature(policyBase64);\n    }\n}"]},"metadata":{},"sourceType":"module"}