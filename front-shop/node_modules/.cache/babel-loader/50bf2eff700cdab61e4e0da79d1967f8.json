{"ast":null,"code":"import { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nexport default class Policy {\n  static getPolicy(config) {\n    const policy = () => {\n      return {\n        expiration: dateISOString,\n        conditions: [{\n          bucket: config.bucketName\n        }, [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`], {\n          acl: \"public-read\"\n        }, [\"starts-with\", \"$Content-Type\", \"\"], {\n          \"x-amz-meta-uuid\": \"14365123651274\"\n        }, {\n          \"x-amz-server-side-encryption\": \"AES256\"\n        }, [\"starts-with\", \"$x-amz-meta-tag\", \"\"], {\n          \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`\n        }, {\n          \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"\n        }, {\n          \"x-amz-date\": xAmzDate\n        }]\n      };\n    }; //Returns a base64 policy;\n\n\n    return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\n  }\n\n}\n;","map":{"version":3,"sources":["/home/seung/react/shop/front-shop/node_modules/react-s3/lib/Policy.js"],"names":["dateISOString","xAmzDate","dateYMD","Policy","getPolicy","config","policy","expiration","conditions","bucket","bucketName","dirName","acl","accessKeyId","region","Buffer","JSON","stringify","toString","replace"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAiD,QAAjD;AAEA,eAAe,MAAMC,MAAN,CAAa;AACR,SAATC,SAAS,CAACC,MAAD,EAAS;AACrB,UAAMC,MAAM,GAAG,MAAM;AACjB,aAAO;AACHC,QAAAA,UAAU,EAAEP,aADT;AAEHQ,QAAAA,UAAU,EAAE,CAAC;AAAEC,UAAAA,MAAM,EAAEJ,MAAM,CAACK;AAAjB,SAAD,EAAgC,CAAC,aAAD,EAAgB,MAAhB,EAAyB,GAAEL,MAAM,CAACM,OAAP,GAAiBN,MAAM,CAACM,OAAP,GAAiB,GAAlC,GAAwC,EAAG,EAAtE,CAAhC,EAA0G;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAA1G,EAAkI,CAAC,aAAD,EAAgB,eAAhB,EAAiC,EAAjC,CAAlI,EAAwK;AAAE,6BAAmB;AAArB,SAAxK,EAAiN;AAAE,0CAAgC;AAAlC,SAAjN,EAA+P,CAAC,aAAD,EAAgB,iBAAhB,EAAmC,EAAnC,CAA/P,EAAuS;AAC/S,8BAAqB,GAAEP,MAAM,CAACQ,WAAY,IAAGX,OAAQ,IAAGG,MAAM,CAACS,MAAO;AADyO,SAAvS,EAET;AAAE,6BAAmB;AAArB,SAFS,EAEkC;AAAE,wBAAcb;AAAhB,SAFlC;AAFT,OAAP;AAMH,KAPD,CADqB,CASrB;;;AACA,WAAO,IAAIc,MAAJ,CAAWC,IAAI,CAACC,SAAL,CAAeX,MAAM,EAArB,CAAX,EAAqCY,QAArC,CAA8C,QAA9C,EAAwDC,OAAxD,CAAgE,OAAhE,EAAyE,EAAzE,CAAP;AACH;;AAZuB;AAa3B","sourcesContent":["import { dateISOString, xAmzDate, dateYMD } from \"./Date\";\n\nexport default class Policy {\n    static getPolicy(config) {\n        const policy = () => {\n            return {\n                expiration: dateISOString,\n                conditions: [{ bucket: config.bucketName }, [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`], { acl: \"public-read\" }, [\"starts-with\", \"$Content-Type\", \"\"], { \"x-amz-meta-uuid\": \"14365123651274\" }, { \"x-amz-server-side-encryption\": \"AES256\" }, [\"starts-with\", \"$x-amz-meta-tag\", \"\"], {\n                    \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`\n                }, { \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\" }, { \"x-amz-date\": xAmzDate }]\n            };\n        };\n        //Returns a base64 policy;\n        return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\n    }\n};"]},"metadata":{},"sourceType":"module"}