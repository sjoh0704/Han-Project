# frontend 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  replicas: 1
  template: 
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend-container
        image: tmdwn0704/frontend:test
        imagePullPolicy: Always
        ports:
        - containerPort: 3000

        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 80
          periodSeconds: 10
          
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 80
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - name: http
      port: 80
      targetPort: 3000
  type: LoadBalancer

---
# api gate way
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: gateway
  replicas: 1
  template: 
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: api-gateway-container
        image: tmdwn0704/gateway-service:test
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        envFrom: 
        - configMapRef:
            name: service-url

        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10

        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
      
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
spec:
  selector:
    app: gateway
  ports:
    - name: http
      port: 8080
      targetPort: 8000
  type: ClusterIP

---
# user-api-server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api-server
spec:
  selector:
    matchLabels:
      app: user
  replicas: 1
  template: 
    metadata:
      labels:
        app: user
    spec:
      containers:
      - name: api-gateway-container
        image: tmdwn0704/user-service:test
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        envFrom: 
        - configMapRef:
            name: service-url

        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name:  user-api-service
spec:
  selector:
    app: user
  ports:
    - name: http
      port: 8080
      targetPort: 8000
  type: ClusterIP


---
# product-api-server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-api-server
spec:
  selector:
    matchLabels:
      app: product
  replicas: 1
  template: 
    metadata:
      labels:
        app: product
    spec:
      containers:
      - name: product-api-container
        image: tmdwn0704/product-service:test
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        envFrom: 
        - configMapRef:
            name: service-url

        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
      
---
apiVersion: v1
kind: Service
metadata:
  name:  product-api-service
spec:
  selector:
    app: product
  ports:
    - name: http
      port: 8080
      targetPort: 8000
  type: ClusterIP

---
# order-api-server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-api-server
spec:
  selector:
    matchLabels:
      app: order
  replicas: 1
  template: 
    metadata:
      labels:
        app: order
    spec:
      containers:
      - name: product-api-container
        image: tmdwn0704/order-service:test
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        envFrom: 
        - configMapRef:
            name: service-url
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 80
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name:  order-api-service
spec:
  selector:
    app: order
  ports:
    - name: http
      port: 8080
      targetPort: 8000
  type: ClusterIP

---
# url 환경변수 

apiVersion: v1
kind: ConfigMap
metadata:
  name: service-url
data:

  PRODUCT_SERVICE_URL: 'http://product-api-service:8080'
  ORDER_SERVICE_URL: 'http://order-api-service:8080'
  USER_SERVICE_URL: 'http://user-api-service:8080'
  APIGATWAY_URL: 'http://api-gateway-service:8080'
  FRONTEND_URL: 'http://frontend-service:8080'

---
# database
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        hostPath: 
          path: /tmp
        # persistentVolumeClaim:
        #   claimName: mysql-pv-claim

